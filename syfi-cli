#!/usr/bin/env php
<?php
namespace SyFi;

set_time_limit(0);

$appFolder = getenv('SYMFONY_APP_FOLDER') ?
    getenv('SYMFONY_APP_FOLDER') : (getcwd() . '/app');

require_once $appFolder . '/bootstrap.php.cache';
require_once $appFolder . '/AppKernel.php';

use Symfony\Component\Console\Input\ArgvInput;
use Symfony\Component\DependencyInjection\Exception\ServiceNotFoundException;

$input = new ArgvInput();
$searchString = $input->getFirstArgument();
$path = parse($searchString);

exit(($path ? realpath($path) : '') . "\n");

function parse($searchString) {
    if (isTwigTemplate($searchString)) {
        return getFileNameFromTwigTemplate($searchString);
    }

    if (isDoctrineModel($searchString)) {
        $modelClass = getClassOfDoctrineModel($searchString);
        return getFileNameForClass($modelClass);
    }

    if (isResource($searchString)) {
        return getFileNameOfResource($searchString);
    }

    if (isFullClass($searchString)) {
        return getFileNameForClass($searchString);
    }

    try {
        $serviceClass = getClassOfService($searchString);
        return getFileNameForClass($serviceClass);
    } catch (ServiceNotFoundException $e) {
        return getFirstPhpFileNamedLike($searchString);
    }
}

function isTwigTemplate($searchString) {
    return endsWith($searchString, '.twig');
}

function endsWith($haystack, $needle) {
    return $needle === "" || (($temp = strlen($haystack) - strlen($needle)) >= 0 && strpos($haystack, $needle, $temp) !== FALSE);
}

function getFileNameFromTwigTemplate($searchString) {
    $container = getKernel()->getContainer();

    $parser = $container->get('templating.name_parser');
    $locator = $container->get('templating.locator');

    return $locator->locate($parser->parse($searchString));
}

function getKernel()
{
    $kernel = new \AppKernel('dev', true);
    $kernel->boot();
    return $kernel;
}

function isDoctrineModel($searchString) {
    return substr_count($searchString, ':') == 1;
}

function getClassOfDoctrineModel($searchString) {
    list($namespaceAlias, $simpleClassName) = explode(':', $searchString);
    return getKernel()->getContainer()
        ->get('doctrine')->getManager()->getConfiguration()
        ->getEntityNamespace($namespaceAlias) . '\\' . $simpleClassName;
}

function getFileNameForClass($searchString) {
    $reflector = new \ReflectionClass($searchString);
    return $reflector->getFileName();
}

function isResource($searchString) {
    return $searchString[0] == '@';
}

function getFileNameOfResource($searchString) {
    return getKernel()->locateResource($searchString);
}

function isFullClass($searchString) {
    return strpos($searchString, '\\') !== false;
}

function getClassOfService($searchString) {
    return get_class(getKernel()->getContainer()->get($searchString));
}

function getFirstPhpFileNamedLike($searchString) {
    $directory = new \RecursiveDirectoryIterator(getcwd());
    $iterator = new \RecursiveIteratorIterator($directory);
    $regex = new \RegexIterator($iterator, '/^.+\.php$/i', \RecursiveRegexIterator::GET_MATCH);

    foreach ($regex as $file) {
        if (endsWith($file[0], $searchString . ".php")) {
            return $file[0];
        }
    }
}
